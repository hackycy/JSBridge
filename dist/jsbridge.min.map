{"version":3,"sources":["webpack://JSBridge/./index.js","webpack://JSBridge/./lib/bridge.js","webpack://JSBridge/webpack/bootstrap","webpack://JSBridge/webpack/startup"],"names":["module","exports","isIosWebView","isWebView","window","hasOwnProperty","isAndroidWebView","navigator","userAgent","indexOf","invokeCallbacks","handleRegisterCallbacks","invokeCallbackId","hasBridge","webkit","messageHandlers","_invokeHandler","e","_handleMessageFromNative","func","paramString","param","JSON","parse","_handleInvokeCallbackFromNative","callbackId","execResult","readyEvent","Event","document","dispatchEvent","invoke","params","callback","paramsString","stringify","postMessage","invokeHandler","invokeSync","syncResult","prompt","invokeSyncHandler","register","executor","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__"],"mappings":"uDAEAA,EAAOC,QAAU,EAAjB,M,QCAA,IAEIC,EAFAC,EAAYC,QAAUA,OAAOC,eAAe,YAI5CC,GAAqD,IADzCF,OAAOG,UAAUC,UACAC,QAAQ,WACzCP,GAAgBI,EAGhB,IAAII,EAAkB,GAClBC,EAA0B,GAC1BC,EAAmB,EAQvB,SAASC,IACP,IACE,QAAKV,IAGDD,KACKE,OAAOU,QACZV,OAAOU,OAAOC,iBACdX,OAAOU,OAAOC,gBAAgBC,kBAI3BZ,OAAOY,gBACd,MAAOC,GACP,OAAO,GAoIX,GAHAb,OAAOc,yBAtGP,SAAiCC,EAAMC,GACrC,IAAIC,EACJ,IACEA,EAAQC,KAAKC,MAAMH,GACnB,MAAOH,GACPI,EAAQD,EAEV,OAAOT,EAAwBQ,GAAME,IAgGvCjB,OAAOoB,gCAzHP,SAAwCC,EAAYC,GAClD,GAA2C,mBAAhChB,EAAgBe,GAA4B,CACrD,IACEC,EAAaJ,KAAKC,MAAMG,GACxB,MAAOT,GACPS,EAAa,GAEfhB,EAAgBe,GAAYC,UAGvBhB,EAAgBe,IAiHrBZ,IAAa,CACf,IAAIc,EAAa,IAAIC,MAAM,iBAC3BxB,OAAOyB,SAASC,cAAcH,GAGhC3B,EAAOC,QAAU,CACf8B,OA3EF,SAAgBZ,EAAMa,EAAQC,GAC5B,GAAKpB,KAGAM,GAAwB,iBAATA,EAApB,CAGKa,GAA4B,iBAAXA,IACpBA,EAAS,IAEX,IAAIE,EAAeZ,KAAKa,UAAUH,GAC9BP,IAAeb,EACnBF,EAAgBe,GAAcQ,EAhChC,SAAuBd,EAAMe,EAAcT,GACrCvB,EAEFE,OAAOU,OAAOC,gBAAgBC,eAAeoB,YAAY,CACvDL,OAAQZ,EACRe,aAAcA,EACdT,WAAYA,IAIdrB,OAAOY,eAAee,OAAOZ,EAAMe,EAAcT,GAuBnDY,CAAclB,EAAMe,EAAcT,KA+DlCa,WAxCF,SAAoBnB,EAAMa,GACxB,GAAKnB,KAGAM,GAAwB,iBAATA,EAOpB,OAJKa,GAA4B,iBAAXA,IACpBA,EAAS,IAtBb,SAA2Bb,EAAMe,GAC/B,IAAIK,EAAanC,OAAOoC,OAzGV,cAyG6BrB,EAAMe,GACjD,IACE,OAAOZ,KAAKC,MAAMgB,GAClB,MAAOtB,GACP,OAAOsB,GAoBFE,CAAkBtB,EADNG,KAAKa,UAAUH,KA+BlCU,SAtBF,SAAkBvB,EAAMwB,GACjB9B,KAGAM,GAAwB,iBAATA,GAAyC,mBAAbwB,IAGhDhC,EAAwBQ,GAAQwB,OC9J9BC,EAA2B,GCE/B,ODCA,SAASC,EAAoBC,GAE5B,GAAGF,EAAyBE,GAC3B,OAAOF,EAAyBE,GAAU7C,QAG3C,IAAID,EAAS4C,EAAyBE,GAAY,CAGjD7C,QAAS,IAOV,OAHA8C,EAAoBD,GAAU9C,EAAQA,EAAOC,QAAS4C,GAG/C7C,EAAOC,QCjBR4C,CAAoB,K","file":"jsbridge.min.js","sourcesContent":["'use strict';\r\n\r\nmodule.exports = require('./lib/bridge');\r\n","'use strict';\r\n\r\nvar isWebView = window && window.hasOwnProperty('document');\r\n\r\nvar isIosWebView = false;\r\nvar userAgent = window.navigator.userAgent;\r\nvar isAndroidWebView = userAgent.indexOf('Android') !== -1;\r\nisIosWebView = !isAndroidWebView;\r\n\r\n// obj\r\nvar invokeCallbacks = {};\r\nvar handleRegisterCallbacks = {};\r\nvar invokeCallbackId = 0;\r\n\r\n// sync invoke use url scheme\r\nvar urlScheme = 'jsbridge://';\r\n\r\n/**\r\n * 用于判断环境是否可用jsbridge\r\n */\r\nfunction hasBridge() {\r\n  try {\r\n    if (!isWebView) {\r\n      return false;\r\n    }\r\n    if (isIosWebView) {\r\n      return window.webkit &&\r\n        window.webkit.messageHandlers &&\r\n        window.webkit.messageHandlers._invokeHandler\r\n        ? true\r\n        : false;\r\n    }\r\n    return window._invokeHandler ? true : false;\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * JS主动调用原生方法后的回调处理\r\n * @param {Number} callbackId 自增的callbackId\r\n * @param {Object} execResult 执行结果\r\n */\r\nfunction handleInvokeCallbackFromNative(callbackId, execResult) {\r\n  if (typeof invokeCallbacks[callbackId] === 'function') {\r\n    try {\r\n      execResult = JSON.parse(execResult);\r\n    } catch (e) {\r\n      execResult = {};\r\n    }\r\n    invokeCallbacks[callbackId](execResult);\r\n  }\r\n  // 无论如何都需要进行删除定义的回调\r\n  delete invokeCallbacks[callbackId];\r\n}\r\n\r\n/**\r\n * 原生主动调用JS方法\r\n * @param {String} func unique name\r\n * @param {String} paramString 参数\r\n */\r\nfunction handleMessageFromNative(func, paramString) {\r\n  var param;\r\n  try {\r\n    param = JSON.parse(paramString);\r\n  } catch (e) {\r\n    param = paramString;\r\n  }\r\n  return handleRegisterCallbacks[func](param);\r\n}\r\n\r\n/**\r\n * real invoke\r\n * @param {String} func unique name\r\n * @param {String} paramsString 参数\r\n * @param {Number} callbackId 自增的callbackId\r\n */\r\nfunction invokeHandler(func, paramsString, callbackId) {\r\n  if (isIosWebView) {\r\n    // iOS\r\n    window.webkit.messageHandlers._invokeHandler.postMessage({\r\n      invoke: func,\r\n      paramsString: paramsString,\r\n      callbackId: callbackId\r\n    });\r\n  } else {\r\n    // Android\r\n    window._invokeHandler.invoke(func, paramsString, callbackId);\r\n  }\r\n}\r\n\r\n/**\r\n * JS主动调用原生方法\r\n * @param {String} func unique name\r\n * @param {Object} params object\r\n * @param {Function} callback 回调函数\r\n */\r\nfunction invoke(func, params, callback) {\r\n  if (!hasBridge()) {\r\n    return;\r\n  }\r\n  if (!func || typeof func !== 'string') {\r\n    return;\r\n  }\r\n  if (!params || typeof params !== 'object') {\r\n    params = {};\r\n  }\r\n  var paramsString = JSON.stringify(params);\r\n  var callbackId = ++invokeCallbackId;\r\n  invokeCallbacks[callbackId] = callback;\r\n  invokeHandler(func, paramsString, callbackId);\r\n}\r\n\r\n/**\r\n * real sync invoke\r\n * @param {String} func unique name\r\n * @param {String} paramsString 参数\r\n * @return {String}\r\n */\r\nfunction invokeSyncHandler(func, paramsString) {\r\n  var syncResult = window.prompt(urlScheme + func, paramsString);\r\n  try {\r\n    return JSON.parse(syncResult);\r\n  } catch (e) {\r\n    return syncResult;\r\n  }\r\n}\r\n\r\n/**\r\n * JS主动调用原生方法，同步返回\r\n * @param {String} func unique name\r\n * @param {Object} params object\r\n */\r\nfunction invokeSync(func, params) {\r\n  if (!hasBridge()) {\r\n    return undefined;\r\n  }\r\n  if (!func || typeof func !== 'string') {\r\n    return undefined;\r\n  }\r\n  if (!params || typeof params !== 'object') {\r\n    params = {};\r\n  }\r\n  var paramsString = JSON.stringify(params);\r\n  return invokeSyncHandler(func, paramsString);\r\n}\r\n\r\n/**\r\n * 注册函数，等待原生主动调用\r\n * @param {String} func unique name\r\n * @param {Function} executor 执行函数\r\n */\r\nfunction register(func, executor) {\r\n  if (!hasBridge()) {\r\n    return;\r\n  }\r\n  if (!func || typeof func !== 'string' || typeof executor !== 'function') {\r\n    return;\r\n  }\r\n  handleRegisterCallbacks[func] = executor;\r\n}\r\n\r\n// 挂载给Native端进行执行\r\nwindow._handleMessageFromNative = handleMessageFromNative;\r\nwindow._handleInvokeCallbackFromNative = handleInvokeCallbackFromNative;\r\n\r\nif (hasBridge()) {\r\n  var readyEvent = new Event('JSBridgeReady');\r\n  window.document.dispatchEvent(readyEvent);\r\n}\r\n\r\nmodule.exports = {\r\n  invoke: invoke,\r\n  invokeSync: invokeSync,\r\n  register: register\r\n};\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(10);\n"],"sourceRoot":""}